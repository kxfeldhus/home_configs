filetype off
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()
" syntax on
" filetype plugin indent on
" call pathogen#infect()

set nocompatible  " We don't want vi compatibility.
set smarttab
set expandtab
set autoindent
" set smartindent
set tags=tags;
set hidden
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set fileformats=unix,dos
set showmatch  " Show matching brackets.
set mat=5  " Bracket blinking.
set lcs=eol:$,trail:~,extends:>,precedes:< " Show $ at end of line and trailing space as ~
set novisualbell  " No blinking .
set noerrorbells  " No noise.
set laststatus=2  " Always show status line.
set hidden
set history=1000
set wildmenu
set wildmode=list:longest
set ignorecase
set smartcase
set scrolloff=3
set nobackup                  " disable creation of backup file.
set noswapfile " no swap files
set backupdir=~/.vim/backups " Where backups will go.
set directory=~/.vim/tmp     " Where temporary files will go.
set ruler
set statusline=%<%f%h%m%r%y%=%03b\ 0x%02B\ \ %04l,%03c\ %P
set hlsearch " Highlight search terms...
set incsearch " ...dynamically as they are typed.
set backspace=indent,eol,start " Intuitive backspacing in insert mode
set nofoldenable " I dislike folding...
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use
set number
set background=dark
set t_Co=256
set shortmess=atI
set listchars=tab:>-,trail:.,eol:$
" set mouse=a
set mouse=

colorscheme solarized

" I always hit wq by accident on my small laptop keyboard, so disable it and
" make wqq do what it should.
cabbrev wq w
cabbrev wqq wq

nnoremap ' `
nnoremap ` '

" Move row-wise instead of line-wise
nnoremap j gj
nnoremap k gk

" Disable some annoying keys
nnoremap <F1> <nop>
nnoremap Q <nop>
nnoremap K <nop>

let mapleader = ","
let maplocalleader = "."

nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" http://vim.wikia.com/wiki/Get_the_correct_indent_for_new_lines_despite_blank_lines
" inoremap <CR> <CR>x<BS>

nmap <silent> <leader>n :silent :nohlsearch<CR>

nmap <silent> <leader>s :set nolist!<CR>

"This unsets the "last search pattern" register by hitting return
"nnoremap <CR> :noh<CR>
nnoremap <leader><space> :noh<CR>

set pastetoggle=<C-v>

" noremap n n:call HighlightNearCursor()<CR>
" noremap N N:call HighlightNearCursor()<CR>
" noremap * *:call HighlightNearCursor()<CR>

" function HighlightNearCursor()
"         match Todo /\k*\%#\k*/
" endfunction

let g:netrw_keepdir=0

function MultiExtensionFiletype()
    let ft_default=&filetype
    let ft_prefix=substitute(matchstr(expand('%'),'\..\+\.'),'\.','','g')
    sil exe "set filetype=" . ft_prefix  . "." . ft_default
endfunction
autocmd BufReadPost *.*.* call MultiExtensionFiletype()

au FileType c,cc,cpp,h,hh,hpp,java,objc,objcpp :set autoindent expandtab cin shiftwidth=4 softtabstop=4 cino +=(0
au FileType html,htm,jsp :set autoindent expandtab cin shiftwidth=2 softtabstop=2 cino +=(0
au FileType xml :set autoindent expandtab cin shiftwidth=2 softtabstop=2
au FileType cucumber :set autoindent expandtab cin shiftwidth=2 softtabstop=2
au FileType perl :set autoindent expandtab cin shiftwidth=2 softtabstop=2
au FileType make :set noautoindent noexpandtab shiftwidth=4 tabstop=4 softtabstop=0

" Javascript stuff
au FileType javascript set autoindent expandtab cin shiftwidth=2 softtabstop=2 cino +=(0
au FileType javascript set omnifunc=javascriptcomplete#CompleteJS

" Python stuff
au FileType python :set autoindent expandtab cin shiftwidth=4 softtabstop=4 cino +=(0
au BufNewFile,BufRead *.mako set filetype=mako
" Pymode
let g:pymode_doc =  0 " Disable the doc window
set completeopt=menu
let g:pymode_lint = 0 " Disable lint checking
let g:pymode_rope = 0
let g:pymode_rope_lookup_project = 0 " Rope will recursively look for a project, and be really slow


" Ruby stuff
au FileType ruby,eruby set autoindent expandtab cin shiftwidth=2 softtabstop=2 cino +=(0
au FileType ruby,eruby set omnifunc=rubycomplete#Complete
au FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
au FileType ruby,eruby let g:rubycomplete_rails = 1
au FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
au BufNewFile,BufRead *.thor set filetype=ruby
au BufNewFile,BufRead .autotest set filetype=ruby
au BufNewFile,BufRead Gemfile set filetype=ruby
au BufNewFile,BufRead *.yaml,*.yml setf yaml
au BufNewFile,BufRead *.jst set syntax=jst
au BufNewFile,BufRead *.j :set syntax=objj

" MapServer config file
au BufNewFile,BufRead *.map         setf map
au FileType map set shiftwidth=2 softtabstop=2 et


""""""""""""""""""""""""""""""""
" Unite
""""""""""""""""""""""""""""""""
let g:unite_source_history_yank_enable = 1
call unite#filters#matcher_default#use(['matcher_fuzzy'])

nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   file_rec/async:!<cr>
nnoremap <leader>f :<C-u>Unite -buffer-name=files   file<cr>
nnoremap <leader>r :<C-u>Unite -buffer-name=mru     file_mru<cr>
nnoremap <leader>y :<C-u>Unite -buffer-name=yank    history/yank<cr>
nnoremap <leader>e :<C-u>Unite -buffer-name=buffer  buffer<cr>


" Fuzze match
" let g:fuzzy_ignore = "*.log"
" let g:fuzzy_matching_limit = 70

" map <silent> <leader>g :FufFileWithCurrentBufferDir<CR>
" map <silent> <leader>f :FufCoverageFile<CR>
" map <silent> <leader>b :FufBuffer<CR>
" map <silent> <leader>q :FufRenewCache<CR>
" nnoremap <silent> <C-f><C-r> :FufRenewCache<CR>


" let g:NERDTreeDirArrows=0 " Turn off the nifty unicode arrows, don't work everywhere
" map <leader>n :NERDTreeToggle<CR>
" map <leader>N :NERDTreeFind<CR>
" let NERDTreeMapActivateNode='<CR>'
" let NERDTreeShowBookmarks=1
" let NERDTreeChDirMode=2
" let NERDTreeQuitOnOpen=1
" let NERDTreeIgnore=['\.pyc','\.o']

""""""""""""""""""""""""""""""
" airline
""""""""""""""""""""""""""""""
if !exists('g:airline_symbols')
        let g:airline_symbols = {}
endif
set noshowmode " Disable the default mode indicator
let g:airline_enable_branch     = 0
let g:airline_left_sep          = ''
let g:airline_left_alt_sep      = ''
let g:airline_right_sep         = ''
let g:airline_right_alt_sep     = ''
let g:airline_symbols.linenr    = '#'
" let g:airline_section_b = '%{getcwd()}'

" Cleanup trailing whitespace
" autocmd BufWritePre * :%s/\s\+$//e
" function StripTrailingWhitespace()
"   if !&binary && &filetype != 'diff'
"     normal mz
"     normal Hmy
"     %s/\s\+$//e
"     normal 'yz<CR>
"     normal `z
"   endif
" endfunction
" map <leader>ws :StripTrailingWhitespace<CR>
"
"
" vim-better-whitespace config
map <leader>ws :StripWhitespace<CR>

" Dont do the whitespace highlighting in the unite window.
let g:better_whitespace_filetypes_blacklist = ['unite']


" Show the 80th column
if (exists('+colorcolumn'))
        set colorcolumn=80
        highlight ColorColumn ctermbg=9
endif


" vim-easy-align config

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


" taglist
" map <leader>m :TlistToggle<CR>
" let Tlist_Exit_OnlyWindow = 1     " exit if taglist is last window open
" let Tlist_Show_One_File = 1       " Only show tags for current buffer

" bufexplorer
" let g:bufExplorerFindActive=1        " Go to active window.
" let g:bufExplorerShowUnlisted=1      " Show unlisted buffers.
" let g:bufExplorerSortBy='number'     " Sort by the buffer's number.
" let g:bufExplorerShowRelativePath=1  " Show relative paths.
" map <silent> <leader>b :BufExplorer<CR>
"

" buffergator
" let g:buffergator_vsplit_size=120
" let g:buffergator_autoupdate=1
" let g:buffergator_show_full_directory_path=0
" let g:buffergator_display_regime="basename"
" let g:buffergator_sort_regime="basename"


let g:SuperTabDefaultCompletionType = "context"

function IndentV()
        Tabularize /\s=\s/l0c0
        Tabularize /^[^:]*\zs:/l0
        Tabularize /=>/

        " Tabularize /^[^=>]*\zs=>/l1
endfunction
map <Leader>iv :call IndentV()<cr>

" Comment line out to 80 characters
map <leader>co O<Esc>85A#<Esc>==<ESC>0<ESC>80l<ESC>100x<ESC>l

" NERDCommenter
" Add a space after the comment delimiter
let NERDSpaceDelims = 1

" Next and last buffer switching
map <leader>k :bprev<CR>
map <leader>l :bnext<CR>

" CTRLP
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'
" let g:ctrlp_root_markers = ''
" let g:ctrlp_working_path_mode = 'ra'

" nnoremap <leader>y "=strftime("%c")<CR>P

" compiler rubyunit
" nmap <Leader>a :cf /tmp/autotest.txt<CR> :compiler rubyunit<CR>


" Don't delete the indents on blank lines for python files
function! IndentIgnoringBlanks(child)
  let lnum = v:lnum
  while v:lnum > 1 && getline(v:lnum-1) == ""
    normal k
    let v:lnum = v:lnum - 1
  endwhile
  if a:child == ""
    if ! &l:autoindent
      return 0
    elseif &l:cindent
      return cindent(v:lnum)
    endif
  else
    exec "let indent=".a:child
    if indent != -1
      return indent
    endif
  endif
  if v:lnum == lnum && lnum != 1
    return -1
  endif
  let next = nextnonblank(lnum)
  if next == lnum
    return -1
  endif
  if next != 0 && next-lnum <= lnum-v:lnum
    return indent(next)
  else
    return indent(v:lnum-1)
  endif
endfunction
command! -bar IndentIgnoringBlanks
            \ if match(&l:indentexpr,'IndentIgnoringBlanks') == -1 |
            \   if &l:indentexpr == '' |
            \     let b:blanks_indentkeys = &l:indentkeys |
            \     if &l:cindent |
            \       let &l:indentkeys = &l:cinkeys |
            \     else |
            \       setlocal indentkeys=!^F,o,O |
            \     endif |
            \   endif |
            \   let b:blanks_indentexpr = &l:indentexpr |
            \   let &l:indentexpr = "IndentIgnoringBlanks('".
            \   substitute(&l:indentexpr,"'","''","g")."')" |
            \ endif
command! -bar IndentNormally
            \ if exists('b:blanks_indentexpr') |
            \   let &l:indentexpr = b:blanks_indentexpr |
            \ endif |
            \ if exists('b:blanks_indentkeys') |
            \   let &l:indentkeys = b:blanks_indentkeys |
            \ endif
augroup IndentIgnoringBlanks
  au!
  au FileType python IndentIgnoringBlanks
augroup END


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Additions from More Instantly Better Vim - Damien Conway

" This rewires n and N to do the highlighing...
    nnoremap <silent> n   n:call HLNext(0.4)<cr>
    nnoremap <silent> N   N:call HLNext(0.4)<cr>

    function! HLNext (blinktime)
        set invcursorline
        redraw
        exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
        set invcursorline
        redraw
    endfunction

"====[ Swap : and ; to make colon commands easier to type ]======

    nnoremap  ;  :
    " nnoremap  :  ;
    "
    "
" set runtimepath^=~/.vim/bundle/ctrlp.vim

" Protect large files from sourcing and other overhead.
" Files become read only
if !exists("my_auto_commands_loaded")
  let my_auto_commands_loaded = 1
  " Large files are > 100M
  " Set options:
  " eventignore+=FileType (no syntax highlighting etc
  " assumes FileType always on)
  " noswapfile (save copy of file)
  " bufhidden=unload (save memory when other file is viewed)
  " buftype=nowritefile (is read-only)
  " undolevels=-1 (no undo possible)
  let g:LargeFile = 1024 * 1024 * 100
  augroup LargeFile
    autocmd BufReadPre * let f=expand("<afile>") | if getfsize(f) > g:LargeFile | set eventignore+=FileType | setlocal noswapfile bufhidden=unload buftype=nowrite undolevels=-1 | else | set eventignore-=FileType | endif
    augroup END
  endif

" function! GetPythonTextWidth()
"     if !exists('g:python_normal_text_width')
"         let normal_text_width = 79
"     else
"         let normal_text_width = g:python_normal_text_width
"     endif

"     if !exists('g:python_comment_text_width')
"         let comment_text_width = 72
"     else
"         let comment_text_width = g:python_comment_text_width
"     endif

"     let cur_syntax = synIDattr(synIDtrans(synID(line("."), col("."), 0)), "name")
"     if cur_syntax == "Comment"
"         return comment_text_width
"     elseif cur_syntax == "String"
"         " Check to see if we're in a docstring
"         let lnum = line(".")
"         while lnum >= 1 && (synIDattr(synIDtrans(synID(lnum, col([lnum, "$"]) - 1, 0)), "name") == "String" || match(getline(lnum), '\v^\s*$') > -1)
"             if match(getline(lnum), "\\('''\\|\"\"\"\\)") > -1
"                 " Assume that any longstring is a docstring
"                 return comment_text_width
"             endif
"             let lnum -= 1
"         endwhile
"     endif

"     return normal_text_width
" endfunction

" augroup pep8
"     au!
"     autocmd CursorMoved,CursorMovedI * :if &ft == 'python' | :exe 'setlocal textwidth='.GetPythonTextWidth() | :endif
" augroup END

syntax on
filetype plugin indent on
